require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_CHAT_ID = process.env.GROUP_CHAT_ID;

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};
const userData = {};
const userTimers = {};

const TIMEOUT_DURATION = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞

function cleanupUserData(chatId) {
    delete userStates[chatId];
    delete userData[chatId];
    if (userTimers[chatId]) {
        clearTimeout(userTimers[chatId]);
        delete userTimers[chatId];
    }
}

function setInactivityTimer(chatId) {
    if (userTimers[chatId]) {
        clearTimeout(userTimers[chatId]);
    }
    userTimers[chatId] = setTimeout(async () => {
        if (userStates[chatId]) {
            await bot.sendMessage(chatId, '_–ü—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã?_', { parse_mode: 'MarkdownV2', ...keyboards.continue });
            cleanupUserData(chatId);
        }
    }, TIMEOUT_DURATION);
}

const keyboards = {
    start: {
        reply_markup: {
            keyboard: [['–ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã'], ['–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ'], ['–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∫—É—Ä—å–µ—Ä–æ–º']],
            resize_keyboard: true
        }
    },
    details: {
        reply_markup: {
            keyboard: [['–ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã'], ['–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∫—É—Ä—å–µ—Ä–æ–º']],
            resize_keyboard: true
        }
    },
    back: {
        reply_markup: { keyboard: [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è']], resize_keyboard: true }
    },
    citizenship: {
        reply_markup: {
            keyboard: [['–†–§ üá∑üá∫'], ['–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã üáßüáæüáπüáØüá∫üáøüá∞üá¨‚Ä¶']],
            resize_keyboard: true
        }
    },
    bike: {
        reply_markup: { keyboard: [['–î–∞'], ['–ù–µ—Ç']], resize_keyboard: true }
    },
    weight: {
        reply_markup: { keyboard: [['–°–ø—Ä–∞–≤–ª—é—Å—å'], ['–ù–µ –¥—É–º–∞—é']], resize_keyboard: true }
    },
    walkCourier: {
        reply_markup: { keyboard: [['–ü—Ä–æ–¥–æ–ª–∂–∏–º'], ['–ù–µ –¥—É–º–∞—é']], resize_keyboard: true }
    },
    phone: {
        reply_markup: { remove_keyboard: true }
    }
};

const messages = {
    start: '*–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.* üìÑ\n\n' +
           '–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞\\-–ø–∞—Ä—Ç–Ω—ë—Ä–∞\\. üö¥\n\n' +
           '_–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?_',
    details: '*–°—Ç—É–¥–µ–Ω—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –≥–æ—Å—Ç–∏ –∏–∑\\-–∑–∞ —Ä—É–±–µ–∂–∞*\n' +
             '–ö—É—Ä—å–µ—Ä–æ–º\\-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –°–∞–º–æ–∫–∞—Ç–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å! üìà\n' +
             '---\n' +
             '*–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:*\n\n' +
             '‚Ä¢ *–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å*, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\\. üí∏\n' +
             '‚Ä¢ *–¶–µ–Ω—Ç—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤* –≤ —à–∞–≥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç –¥–æ–º–∞\\. üèòÔ∏è\n' +
             '‚Ä¢ *–†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–æ–∫* –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö _1,5‚Äì3 –∫–º_ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤\\. üß≠\n' +
             '‚Ä¢ *–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é —É–Ω–∏—Ñ–æ—Ä–º—É, —à–ª–µ–º –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥.* üö¥\n' +
             '‚Ä¢ *–ê–±—Å–æ–ª—é—Ç–Ω—É—é –≥–∏–±–∫–æ—Å—Ç—å* –≤ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ \\(–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –æ—Ç _2\\-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å_\\)\\. üìÖ\n' +
             '‚Ä¢ *–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è* –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤\\. üòå\n' +
             '‚Ä¢ *–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤.* üßæ\n' +
             '‚Ä¢ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏.* –û–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–∞ –°–∞–º–æ–∫–∞—Ç –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–±–µ —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ç–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞\\. ‚úÖ\n\n' +
             '---\n' +
             '*–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?*\n\n' +
             '–¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –∏—Ö HR\\-–º–µ–Ω–µ–¥–∂–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –∑–∞–ø–æ–ª–Ω–∏—à—å –∞–Ω–∫–µ—Ç—É\\. üìÑ',
    ageRestriction: '*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—å–µ—Ä–æ–º\\-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –°–∞–º–æ–∫–∞—Ç–∞ –º–æ–∂–Ω–æ —Å—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç.* ü•∫\n\n' +
                    '_–ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—à—å —Å—Ç–∞—Ä—à–µ!_',
    walkCourier: '*–ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–µ—à–∏—Ö –∫—É—Ä—å–µ—Ä–∞—Ö.* –ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º\\. ‚úÖ',
    weightWarning: '*–ò–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–∑—ë—Ç –∫—É—Ä—å–µ—Ä, –º–æ–∂–µ—Ç –≤–µ—Å–∏—Ç—å 15\\-20 –∫–≥.* –°–ø—Ä–∞–≤–∏—à—å—Å—è? üèãÔ∏è',
    final: '*–û—Ç–ª–∏—á–Ω–æ! –î—É–º–∞–µ—à—å, —Ç—ã –ø–æ–¥—Ö–æ–¥–∏—à—å!* üî•\n\n' +
           '_–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã HR\\-–º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π._ üìû\n\n' +
           '–û–Ω –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —É–¥–æ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\\. ü§ù\n\n' +
           '> _–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –Ω–µ —Ö—Ä–∞–Ω—é –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º._ üîê'
};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    cleanupUserData(chatId);
    userStates[chatId] = 'START';
    setInactivityTimer(chatId);
    await bot.sendMessage(chatId, messages.start, { parse_mode: 'MarkdownV2', ...keyboards.start });
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    setInactivityTimer(chatId);

    if (text === '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è') {
        cleanupUserData(chatId);
        userStates[chatId] = 'START'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await bot.sendMessage(chatId, messages.start, { parse_mode: 'MarkdownV2', ...keyboards.start });
        return;
    }

    const handlers = {
        'START': () => handleStartState(chatId, text),
        'WAITING_NAME': () => handleNameState(chatId, text),
        'WAITING_AGE': () => handleAgeState(chatId, text),
        'WAITING_CITIZENSHIP': () => handleCitizenshipState(chatId, text),
        'WAITING_BIKE': () => handleBikeState(chatId, text),
        'WAITING_WEIGHT': () => handleWeightState(chatId, text),
        'WAITING_WALK_COURIER': () => handleWalkCourierState(chatId, text),
        'WAITING_PHONE': () => handlePhoneState(chatId, text)
    };

    const handler = handlers[userStates[chatId]];
    if (handler) await handler();
});

async function handleStartState(chatId, text) {
    if (text === '–ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã') {
        userStates[chatId] = 'WAITING_NAME';
        await bot.sendMessage(chatId, '_–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?_', { parse_mode: 'MarkdownV2', ...keyboards.phone });
    } else if (text === '–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ') {
        await bot.sendMessage(chatId, messages.details, { parse_mode: 'MarkdownV2', ...keyboards.details });
    } else if (text === '–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∫—É—Ä—å–µ—Ä–æ–º') {
        await bot.sendMessage(chatId, '_–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è._', { parse_mode: 'MarkdownV2', ...keyboards.back });
        cleanupUserData(chatId);
    }
}

async function handleNameState(chatId, name) {
    userData[chatId] = { name };
    userStates[chatId] = 'WAITING_AGE';
    await bot.sendMessage(chatId, `_–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, ${escapeMarkdownV2(name)}?_`, { parse_mode: 'MarkdownV2', ...keyboards.phone });
}

async function handleAgeState(chatId, age) {
    if (isNaN(parseInt(age))) {
        await bot.sendMessage(chatId, '_–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏._', { parse_mode: 'MarkdownV2', ...keyboards.phone });
        return;
    }
    const parsedAge = parseInt(age);
    if (parsedAge < 18) {
        await bot.sendMessage(chatId, messages.ageRestriction, { parse_mode: 'MarkdownV2', ...keyboards.back });
        cleanupUserData(chatId);
        return;
    }
    userData[chatId].age = parsedAge;
    userStates[chatId] = 'WAITING_CITIZENSHIP';
    await bot.sendMessage(chatId, '_–ö–∞–∫–æ–µ —É —Ç–µ–±—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?_', { parse_mode: 'MarkdownV2', ...keyboards.citizenship });
}

async function handleCitizenshipState(chatId, citizenship) {
    userData[chatId].citizenship = citizenship;
    userStates[chatId] = 'WAITING_BIKE';
    await bot.sendMessage(chatId, '_–£–º–µ–µ—à—å –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ? üö¥_', { parse_mode: 'MarkdownV2', ...keyboards.bike });
}

async function handleBikeState(chatId, bike) {
    userData[chatId].canRideBike = bike;
    if (bike === '–î–∞') {
        userStates[chatId] = 'WAITING_WEIGHT';
        await bot.sendMessage(chatId, '*–ò–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–∑—ë—Ç –∫—É—Ä—å–µ—Ä, –º–æ–∂–µ—Ç –≤–µ—Å–∏—Ç—å 15\\-20 –∫–≥.* –°–ø—Ä–∞–≤–∏—à—å—Å—è? üèãÔ∏è', { parse_mode: 'MarkdownV2', ...keyboards.weight });
    } else {
        userStates[chatId] = 'WAITING_WALK_COURIER';
        await bot.sendMessage(chatId, '*–ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–µ—à–∏—Ö –∫—É—Ä—å–µ—Ä–∞—Ö.* –ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º\\. ‚úÖ', { parse_mode: 'MarkdownV2', ...keyboards.walkCourier });
    }
}

async function handleWeightState(chatId, weightResponse) {
    if (weightResponse === '–°–ø—Ä–∞–≤–ª—é—Å—å') {
        userStates[chatId] = 'WAITING_PHONE';
        await bot.sendMessage(chatId, messages.final, { parse_mode: 'MarkdownV2', ...keyboards.phone });
    } else if (weightResponse === '–ù–µ –¥—É–º–∞—é') {
        await bot.sendMessage(chatId, '–¢–∞–∫–∏–µ —Ç—è–∂—ë–ª—ã–µ –∑–∞–∫–∞–∑—ã - —Ä–µ–¥–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ. –í –æ—Å–Ω–æ–≤–Ω–æ–º, –Ω–µ –±–æ–ª–µ–µ 10% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞. –û–¥–Ω–∞–∫–æ –≤—Å–µ –∫—É—Ä—å–µ—Ä—ã\\-–ø–∞—Ä—Ç–Ω—ë—Ä—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏—Ö –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç.', { parse_mode: 'MarkdownV2' });
        userStates[chatId] = 'ZERO';
    }
}

async function handleWalkCourierState(chatId, walkResponse) {
    if (walkResponse === '–ü—Ä–æ–¥–æ–ª–∂–∏–º') {
        userStates[chatId] = 'WAITING_WEIGHT';
        await bot.sendMessage(chatId, '*–ò–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–∑—ë—Ç –∫—É—Ä—å–µ—Ä, –º–æ–∂–µ—Ç –≤–µ—Å–∏—Ç—å 15\\-20 –∫–≥.* –°–ø—Ä–∞–≤–∏—à—å—Å—è? üèãÔ∏è', { parse_mode: 'MarkdownV2', ...keyboards.weight });
    } else {
        await bot.sendMessage(chatId, '_–ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ —Ä–µ—à–∏—à—å —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º!_', { parse_mode: 'MarkdownV2', ...keyboards.back });
        cleanupUserData(chatId);
    }
}

async function handlePhoneState(chatId, phone) {
    const phoneRegex = /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s./0-9]*$/;
    if (!phoneRegex.test(phone)) {
        await bot.sendMessage(chatId, '_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞._', { parse_mode: 'MarkdownV2', ...keyboards.phone });
        return;
    }

    userData[chatId].phone = phone;

    // –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await bot.getChat(chatId);
    const username = user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';

    const summary =
        `*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n\n` +
        `‚Ä¢ *–ò–º—è:* ${escapeMarkdownV2(userData[chatId].name)}\n` +
        `‚Ä¢ *–í–æ–∑—Ä–∞—Å—Ç:* ${userData[chatId].age}\n` +
        `‚Ä¢ *–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:* ${escapeMarkdownV2(userData[chatId].citizenship)}\n` +
        `‚Ä¢ *–í–µ–ª–æ—Å–∏–ø–µ–¥:* ${escapeMarkdownV2(userData[chatId].canRideBike)}\n` +
        `‚Ä¢ *–¢–µ–ª–µ—Ñ–æ–Ω:* ${escapeMarkdownV2(userData[chatId].phone)}\n` +
        `‚Ä¢ *–ü—Ä–æ—Ñ–∏–ª—å:* ${escapeMarkdownV2(username)} \(ID: ${chatId}\)`;

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
        await bot.sendMessage(GROUP_CHAT_ID, summary, { parse_mode: 'MarkdownV2' });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, messages.final, { parse_mode: 'MarkdownV2', ...keyboards.back });

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanupUserData(chatId);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        await bot.sendMessage(chatId, '_–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ._', { parse_mode: 'MarkdownV2', ...keyboards.back });
        cleanupUserData(chatId);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
function escapeMarkdownV2(text) {
    return text.replace(/([_*[\]()~`>#+-=|{}.!])/g, '\\$1');
}
