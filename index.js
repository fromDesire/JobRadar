const keyboards = {
    start: {
        reply_markup: {
            keyboard: [
                ['–ü—Ä–æ–¥–æ–ª–∂–∏–º'],
                ['–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ'],
                ['–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∫—É—Ä—å–µ—Ä–æ–º']
            ],
            resize_keyboard: true
        }
    },
    back: {
        reply_markup: {
            keyboard: [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è']],
            resize_keyboard: true
        }
    },
    citizenship: {
        reply_markup: {
            keyboard: [
                ['–†–§ üá∑üá∫'],
                ['–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã üáßüáæüáπüáØüá∫üáøüá∞üá¨‚Ä¶']
            ],
            resize_keyboard: true
        }
    },
    bike: {
        reply_markup: {
            keyboard: [
                ['–î–∞'],
                ['–ù–µ—Ç']
            ],
            resize_keyboard: true
        }
    },
    weight: {
        reply_markup: {
            keyboard: [
                ['–ö–æ–Ω–µ—á–Ω–æ'],
                ['–ù–µ –¥—É–º–∞—é']
            ],
            resize_keyboard: true
        }
    },
    continue: {
        reply_markup: {
            keyboard: [
                ['–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º'],
                ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è']
            ],
            resize_keyboard: true
        }
    },
    remove: {
        reply_markup: {
            remove_keyboard: true
        }
    }
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const messages = {
    start: '–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. üìÑ\n\n' +
           '–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞-–ø–∞—Ä—Ç–Ω—ë—Ä–∞. üö¥\n\n' +
           '–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
    details: '–°—Ç—É–¥–µ–Ω—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, –≥–æ—Å—Ç–∏ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞ - –∫—É—Ä—å–µ—Ä–æ–º-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –°–∞–º–æ–∫–∞—Ç–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å! üìà\n\n' +
             '–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n' +
             'üí∏ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n' +
             'üèòÔ∏è –¶–µ–Ω—Ç—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —à–∞–≥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç –¥–æ–º–∞.\n' +
             'üß≠ –†–∞–¥–∏—É—Å –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1,5-3 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.\n' +
             'üö¥ –ë–µ—Å–ø–ª–∞—Ç–Ω—É—é —É–Ω–∏—Ñ–æ—Ä–º—É, —à–ª–µ–º –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥.\n' +
             'üìÖ –ê–±—Å–æ–ª—é—Ç–Ω—É—é –≥–∏–±–∫–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ (–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –æ—Ç 2-—Ö —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å).\n' +
             'üòå –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.\n' +
             'üßæ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤.\n' +
             '‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏. –û–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–∞ –°–∞–º–æ–∫–∞—Ç –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–±–µ —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ç–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞.\n\n' +
             '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? - –¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –∏—Ö HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –∑–∞–ø–æ–ª–Ω–∏—à—å –∞–Ω–∫–µ—Ç—É. üìÑ',
    ageRestriction: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—É—Ä—å–µ—Ä–æ–º-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –°–∞–º–æ–∫–∞—Ç–∞ –º–æ–∂–Ω–æ —Å—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç. ü•∫\n' +
                    '–ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—à—å —Å—Ç–∞—Ä—à–µ!',
    walkCourier: '–ò–Ω–æ–≥–¥–∞ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–µ—à–∏—Ö –∫—É—Ä—å–µ—Ä–∞—Ö. –ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º. ‚úÖ',
    weightWarning: '–¢–∞–∫–∏–µ —Ç—è–∂—ë–ª—ã–µ –∑–∞–∫–∞–∑—ã - —Ä–µ–¥–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ. –í –æ—Å–Ω–æ–≤–Ω–æ–º, –Ω–µ –±–æ–ª–µ–µ 10% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞. ' +
                   '–û–¥–Ω–∞–∫–æ –≤—Å–µ –∫—É—Ä—å–µ—Ä—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏—Ö –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç. –ï—Å–ª–∏ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –º—ã –º–æ–∂–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.',
    final: '–°–ø–∞—Å–∏–±–æ! HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚úÖ\n' +
           '–ó–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å 12:00 –¥–æ 19:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. üïê\n' +
           '–ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ –∫—É—Ä—å–µ—Ä–æ–≤-–ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –°–∞–º–æ–∫–∞—Ç–∞! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã'
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    cleanupUserData(chatId);
    userStates[chatId] = 'START';
    userData[chatId] = {};
    setInactivityTimer(chatId);

    await bot.sendMessage(chatId, messages.start, keyboards.start);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    setInactivityTimer(chatId);

    if (text === '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è') {
        cleanupUserData(chatId);
        userStates[chatId] = 'START';
        userData[chatId] = {};
        await bot.sendMessage(chatId, messages.start, keyboards.start);
        return;
    }

    const handlers = {
        'START': () => handleStartState(chatId, text),
        'WAITING_NAME': () => handleNameState(chatId, text),
        'WAITING_AGE': () => handleAgeState(chatId, text),
        'WAITING_CITIZENSHIP': () => handleCitizenshipState(chatId, text),
        'WAITING_BIKE': () => handleBikeState(chatId, text),
        'WAITING_WEIGHT': () => handleWeightState(chatId, text),
        'WAITING_PHONE': () => handlePhoneState(chatId, text)
    };

    const handler = handlers[userStates[chatId]];
    if (handler) {
        await handler();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã
async function handleStartState(chatId, text) {
    switch (text) {
        case '–ü—Ä–æ–¥–æ–ª–∂–∏–º':
            userStates[chatId] = 'WAITING_NAME';
            await bot.sendMessage(chatId, '–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', keyboards.remove);
            break;
        case '–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ':
            await bot.sendMessage(chatId, messages.details, {
                reply_markup: {
                    keyboard: [
                        ['–ü—Ä–æ–¥–æ–ª–∂–∏–º (–í1)'],
                        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è']
                    ],
                    resize_keyboard: true
                }
            });
            break;
        case '–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∫—É—Ä—å–µ—Ä–æ–º':
            await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è.', keyboards.back);
            cleanupUserData(chatId);
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏
async function handleNameState(chatId, name) {
    userData[chatId].name = name;
    userStates[chatId] = 'WAITING_AGE';
    await bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç, ${name}?`, keyboards.remove);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
async function handleAgeState(chatId, age) {
    const ageNum = parseInt(age);
    if (isNaN(ageNum)) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.', keyboards.remove);
        return;
    }

    if (ageNum < 18) {
        await bot.sendMessage(chatId, messages.ageRestriction, keyboards.back);
        cleanupUserData(chatId);
        return;
    }

    userData[chatId].age = ageNum;
    userStates[chatId] = 'WAITING_CITIZENSHIP';
    await bot.sendMessage(chatId, '–ö–∞–∫–æ–µ —É —Ç–µ–±—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?', keyboards.citizenship);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞
async function handleCitizenshipState(chatId, citizenship) {
    userData[chatId].citizenship = citizenship;
    userStates[chatId] = 'WAITING_BIKE';
    await bot.sendMessage(chatId, '–£–º–µ–µ—à—å –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ? üö¥', keyboards.bike);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
async function handleBikeState(chatId, canRideBike) {
    userData[chatId].canRideBike = canRideBike;

    if (canRideBike === '–ù–µ—Ç') {
        await bot.sendMessage(chatId, messages.walkCourier, keyboards.continue);
        return;
    }

    userStates[chatId] = 'WAITING_WEIGHT';
    await bot.sendMessage(chatId, '–ò–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–∑—ë—Ç –∫—É—Ä—å–µ—Ä, –º–æ–∂–µ—Ç –≤–µ—Å–∏—Ç—å 15-20 –∫–≥. –°–ø—Ä–∞–≤–∏—à—å—Å—è? üèãÔ∏è', keyboards.weight);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞
async function handleWeightState(chatId, canCarryWeight) {
    userData[chatId].canCarryWeight = canCarryWeight;

    if (canCarryWeight === '–ù–µ –¥—É–º–∞—é') {
        await bot.sendMessage(chatId, messages.weightWarning, keyboards.back);
        cleanupUserData(chatId);
        return;
    }

    userStates[chatId] = 'WAITING_PHONE';
    await bot.sendMessage(
        chatId,
        '–û—Ç–ª–∏—á–Ω–æ! –î—É–º–∞—é, —Ç—ã –ø–æ–¥—Ö–æ–¥–∏—à—å! üî•\n' +
        '–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã HR-–º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π. üìû\n' +
        '–û–Ω –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —É–¥–æ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n' +
        '–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –Ω–µ —Ö—Ä–∞–Ω—é –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é –∏—Ö 3-–º –ª–∏—Ü–∞–º.',
        keyboards.remove
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function handlePhoneState(chatId, phone) {
    userData[chatId].phone = phone;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await bot.getChat(chatId);
    const userId = user.username ? `@${user.username}` : `ID: ${chatId}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ summary –≤ –≥—Ä—É–ø–ø—É
    const summary =
        '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n' +
        `–ò–º—è: ${userData[chatId].name}\n` +
        `–í–æ–∑—Ä–∞—Å—Ç: ${userData[chatId].age}\n` +
        `–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${userData[chatId].citizenship}\n` +
        `–í–µ–ª–æ—Å–∏–ø–µ–¥: ${userData[chatId].canRideBike}\n` +
        `–í–µ—Å –∑–∞–∫–∞–∑–æ–≤: ${userData[chatId].canCarryWeight}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${userData[chatId].phone}\n` +
        `–ü—Ä–æ—Ñ–∏–ª—å: ${userId}`;

    await bot.sendMessage(GROUP_CHAT_ID, summary);
    await bot.sendMessage(chatId, messages.final, keyboards.back);
    cleanupUserData(chatId);
}
